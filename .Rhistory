xlabel <- seq(0, length(fft_result) - 1, by = 1)
axis(1, at = xlabel, labels = xlabel)
# Partie imaginaire
imag_part <- Im(fft_result)
barplot(imag_part, col = "lightcoral", main = "Partie Imaginaire des Composantes", xlab = "Fréquence", ylab = "Amplitude")
xlabel <- seq(0, length(fft_result) - 1, by = 1)
axis(1, at = xlabel, labels = xlabel)
# Rétablir le paramètre de disposition par défaut
par(mfrow=c(1, 1))
# Mesurer le temps d'exécution de l'algorithme FFT
x <- rnorm(2^16)  # Créer une séquence de données aléatoires de taille 2^16
system.time(fft_result <- fft_recursive(x))
# Algorithme FFT (Transformée de Fourier Rapide)
fft_recursive <- function(x) {
N <- length(x)
if (N <= 1) {
return(x)
}
even <- fft_recursive(x[seq(2, N, by = 2)])
odd <- fft_recursive(x[seq(1, N, by = 2)])
T <- exp(-2i * pi * (0:(N/2-1)) / N)
return(c(even + T * odd, even - T * odd))
}
# Exemple de calcul FFT avec une sinusoïde plus distincte
N <- 32  # Taille de la séquence
f <- 4  # Fréquence de la sinusoïde
x <- sin(2 * pi * f * (1:N) / N)  # Séquence de données contenant une sinusoïde
# Calculer la FFT
fft_result <- fft_recursive(round(x, digits = 10))
print(fft_result)
# Calculer la magnitude de la séquence FFT
magnitude <- Mod(fft_result)
# Afficher la magnitude
print(magnitude)
# Graphique pour la partie réelle et imaginaire des composantes
par(mfrow=c(2, 1))  # Divise la zone de tracé en deux parties
# Partie réelle (sans arrondi)
real_part <- Re(fft_result)
barplot(real_part, col = "skyblue", main = "Partie Réelle des Composantes", xlab = "Fréquence", ylab = "Amplitude")
xlabel <- seq(0, length(fft_result) - 1, by = 1)
axis(1, at = xlabel, labels = xlabel)
# Partie imaginaire
imag_part <- Im(fft_result)
barplot(imag_part, col = "lightcoral", main = "Partie Imaginaire des Composantes", xlab = "Fréquence", ylab = "Amplitude")
xlabel <- seq(0, length(fft_result) - 1, by = 1)
axis(1, at = xlabel, labels = xlabel)
# Rétablir le paramètre de disposition par défaut
par(mfrow=c(1, 1))
# Mesurer le temps d'exécution de l'algorithme FFT
x <- rnorm(2^16)  # Créer une séquence de données aléatoires de taille 2^16
system.time(fft_result <- fft_recursive(x))
# Algorithme FFT (Transformée de Fourier Rapide)
fft_recursive <- function(x) {
N <- length(x)
if (N <= 1) {
return(x)
}
even <- fft_recursive(x[seq(2, N, by = 2)])
odd <- fft_recursive(x[seq(1, N, by = 2)])
T <- exp(-2i * pi * (0:(N/2-1)) / N)
return(c(even + T * odd, even - T * odd))
}
# Exemple de calcul FFT avec une sinusoïde plus distincte
N <- 32  # Taille de la séquence
f <- 4  # Fréquence de la sinusoïde
x <- sin(2 * pi * f * (1:N) / N)  # Séquence de données contenant une sinusoïde
# Calculer la FFT
fft_result <- fft_recursive(round(x, digits = 15))
print(fft_result)
# Calculer la magnitude de la séquence FFT
magnitude <- Mod(fft_result)
# Afficher la magnitude
print(magnitude)
# Graphique pour la partie réelle et imaginaire des composantes
par(mfrow=c(2, 1))  # Divise la zone de tracé en deux parties
# Partie réelle (sans arrondi)
real_part <- Re(fft_result)
barplot(real_part, col = "skyblue", main = "Partie Réelle des Composantes", xlab = "Fréquence", ylab = "Amplitude")
xlabel <- seq(0, length(fft_result) - 1, by = 1)
axis(1, at = xlabel, labels = xlabel)
# Partie imaginaire
imag_part <- Im(fft_result)
barplot(imag_part, col = "lightcoral", main = "Partie Imaginaire des Composantes", xlab = "Fréquence", ylab = "Amplitude")
xlabel <- seq(0, length(fft_result) - 1, by = 1)
axis(1, at = xlabel, labels = xlabel)
# Rétablir le paramètre de disposition par défaut
par(mfrow=c(1, 1))
# Mesurer le temps d'exécution de l'algorithme FFT
x <- rnorm(2^16)  # Créer une séquence de données aléatoires de taille 2^16
system.time(fft_result <- fft_recursive(x))
# Algorithme FFT (Transformée de Fourier Rapide)
fft_recursive <- function(x) {
N <- length(x)
if (N <= 1) {
return(x)
}
even <- fft_recursive(x[seq(2, N, by = 2)])
odd <- fft_recursive(x[seq(1, N, by = 2)])
T <- exp(-2i * pi * (0:(N/2-1)) / N)
return(c(even + T * odd, even - T * odd))
}
# Exemple de calcul FFT avec une sinusoïde plus distincte
N <- 32  # Taille de la séquence
f <- 4  # Fréquence de la sinusoïde
x <- sin(2 * pi * f * (1:N) / N)  # Séquence de données contenant une sinusoïde
# Calculer la FFT
fft_result <- fft_recursive(round(x, digits = 10))
print(fft_result)
# Calculer la magnitude de la séquence FFT
magnitude <- Mod(fft_result)
# Afficher la magnitude
print(magnitude)
# Graphique pour la partie réelle et imaginaire des composantes
par(mfrow=c(2, 1))  # Divise la zone de tracé en deux parties
# Partie réelle (sans arrondi)
real_part <- Re(fft_result)
barplot(real_part, col = "skyblue", main = "Partie Réelle des Composantes", xlab = "Fréquence", ylab = "Amplitude")
xlabel <- seq(0, length(fft_result) - 1, by = 1)
axis(1, at = xlabel, labels = xlabel)
# Partie imaginaire
imag_part <- Im(fft_result)
barplot(imag_part, col = "lightcoral", main = "Partie Imaginaire des Composantes", xlab = "Fréquence", ylab = "Amplitude")
xlabel <- seq(0, length(fft_result) - 1, by = 1)
axis(1, at = xlabel, labels = xlabel)
# Rétablir le paramètre de disposition par défaut
par(mfrow=c(1, 1))
# Mesurer le temps d'exécution de l'algorithme FFT
x <- rnorm(2^16)  # Créer une séquence de données aléatoires de taille 2^16
system.time(fft_result <- fft_recursive(x))
### Question 1 ###
# Définir les paramètres
N <- 8
Te <- 1/16  # Période d'échantillonnage (fe = 16 Hz)
t <- seq(0, (N-1)*Te, by=Te)  # Créer un vecteur de temps
n <- 0:(N-1)
xt <- 2 * sin(8 * pi * t) + 8 * cos(4 * pi * t)
# Définir la fonction x(t)
x <- function(t) {
return(2 * sin(8 * pi * t) + 8 * cos(4 * pi * t))
}
# Échantillonner le signal x(t) pour obtenir xn
xn <- x(t)
# Calculer la TFD
Xk <- complex(real=rep(0,N), imaginary=rep(0,N)) # Initialiser un vecteur complexe
for (k in 0:(N-1)) {
for (nn in n) {
Xk[k+1] = Xk[k+1] + xt[nn+1] * exp(-1i * 2 * pi * k * nn / N)
}
}
Xk <- round(Xk, digits = 8)
print(Xk)
### Question 2 ###
library(ggplot2)
# Créer un data frame pour le signal xn
df_signal <- data.frame(t, xn)
# Créer un vecteur de temps pour une interpolation plus fine
t_interpolation <- seq(0, (N-1)*Te, length.out = 1000)
# Calculer la sinusoïde correspondante à votre signal avec interpolation
sinusoide_interpol <- 2 * sin(8 * pi * t_interpolation) + 8 * cos(4 * pi * t_interpolation)
# Créer un data frame pour la sinusoïde interpolée
df_sinusoide_interpol <- data.frame(t = t_interpolation, sinusoide = sinusoide_interpol)
# Tracer le signal et la sinusoïde interpolée sur le même graphique
(
ggplot() +
geom_line(data = df_signal, aes(x = t, y = xn), color = "blue", linetype = "dashed") +
geom_path(data = df_sinusoide_interpol, aes(x = t, y = sinusoide), color = "red") +
geom_point(data = df_signal, aes(x = t, y = xn), color = "blue") +  # Ajouter des points bleus pour le signal
labs(x = "Temps", y = "Amplitude") +
ggtitle("Signal x(t) et Sinusoïde correspondante (interpolée)")
)
# Calculer le spectre d'amplitude
amplitude_spectrum <- Mod(Xk)
# Créer un data frame pour le spectre d'amplitude
df_spectrum <- data.frame(
frequency = seq(0, (N-1)*(1/Te), by=1/Te),
amplitude_spectrum
)
# Effectuer une interpolation pour obtenir une courbe lisse
smoothed_spectrum <- spline(df_spectrum$frequency, df_spectrum$amplitude_spectrum, n=1000)
# Créer un nouveau data frame pour les données lissées
df_smoothed_spectrum <- data.frame(
frequency = smoothed_spectrum$x,
amplitude_spectrum = smoothed_spectrum$y
)
# Tracer le spectre d'amplitude lissé avec les points originaux
(
ggplot(df_spectrum, aes(x=frequency))
+ geom_line(aes(y=amplitude_spectrum), color="blue", linetype = "dashed")  # Tracer le spectre d'amplitude original sous forme de courbe bleue
+ geom_line(data=df_smoothed_spectrum, aes(x=frequency, y=amplitude_spectrum), color="red")  # Tracer le spectre d'amplitude lissé sous forme de courbe rouge
+ geom_point(data=df_spectrum, aes(x=frequency, y=amplitude_spectrum), color="blue")  # Ajouter des points bleus aux sommets de la courbe originale
+ labs(x="Fréquence (Hz)", y="Amplitude")
+ ggtitle("Spectre d'Amplitude Lissé avec Sinusoïde et Points")
)
### Question 1 ###
# Définir les paramètres
N1 <- 24
Te <- 1/16  # Période d'échantillonnage (fe = 16 Hz)
t1 <- seq(0, (N1-1)*Te, by=Te)  # Créer un vecteur de temps
n1 <- 0:(N1-1)
xt1 <- 3 * sin(8 * pi * t1) + 4 * cos(6 * pi * t1)
# Définir la fonction x(t)
x <- function(t) {
return(3 * sin(8 * pi * t1) + 4 * cos(6 * pi * t1))
}
# Échantillonner le signal x(t) pour obtenir xn
xn <- x(t1)
# Calculer la TFD
Xk1 <- complex(real=rep(0,N1), imaginary=rep(0,N1)) # Initialiser un vecteur complexe
for (k in 0:(N1-1)) {
for (nn in n1) {
Xk1[k+1] = Xk1[k+1] + xt1[nn+1] * exp(-1i * 2 * pi * k * nn / N1)
}
}
Xk1 <- round(Xk1, digits = 8)
print(Xk1)
### Question 2 ###
library(ggplot2)
# Créer un data frame pour le signal xn
df_signal <- data.frame(t1, xn)
# Créer un vecteur de temps pour une interpolation plus fine
t_interpolation <- seq(0, (N1-1)*Te, length.out = 1000)
# Calculer la sinusoïde correspondante à votre signal avec interpolation
sinusoide_interpol <- 3 * sin(8 * pi * t_interpolation) + 4 * cos(6 * pi * t_interpolation)
# Créer un data frame pour la sinusoïde interpolée
df_sinusoide_interpol <- data.frame(t1 = t_interpolation, sinusoide = sinusoide_interpol)
# Tracer le signal et la sinusoïde interpolée sur le même graphique
(
ggplot() +
geom_line(data = df_signal, aes(x = t1, y = xn), color = "blue", linetype = "dashed") +
geom_path(data = df_sinusoide_interpol, aes(x = t1, y = sinusoide), color = "red") +
geom_point(data = df_signal, aes(x = t1, y = xn), color = "blue") +  # Ajouter des points bleus pour le signal
labs(x = "Temps", y = "Amplitude") +
ggtitle("Signal x(t) et Sinusoïde correspondante (interpolée)")
)
# Calculer le spectre d'amplitude
amplitude_spectrum <- Mod(Xk1)
# Créer un data frame pour le spectre d'amplitude
df_spectrum <- data.frame(
frequency = seq(0, (N1-1)*(1/Te), by=1/Te),
amplitude_spectrum
)
# Effectuer une interpolation pour obtenir une courbe lisse
smoothed_spectrum <- spline(df_spectrum$frequency, df_spectrum$amplitude_spectrum, n=1000)
# Créer un nouveau data frame pour les données lissées
df_smoothed_spectrum <- data.frame(
frequency = smoothed_spectrum$x,
amplitude_spectrum = smoothed_spectrum$y
)
# Tracer le spectre d'amplitude lissé avec les points originaux
(
ggplot(df_spectrum, aes(x=frequency))
+ geom_line(aes(y=amplitude_spectrum), color="blue", linetype = "dashed")  # Tracer le spectre d'amplitude original sous forme de courbe bleue
+ geom_line(data=df_smoothed_spectrum, aes(x=frequency, y=amplitude_spectrum), color="red")  # Tracer le spectre d'amplitude lissé sous forme de courbe rouge
+ geom_point(data=df_spectrum, aes(x=frequency, y=amplitude_spectrum), color="blue")  # Ajouter des points bleus aux sommets de la courbe originale
+ labs(x="Fréquence (Hz)", y="Amplitude")
+ ggtitle("Spectre d'Amplitude Lissé avec Sinusoïde et Points")
)
library(crayon)
# Implémenter la TFD inverse
ifft <- function(Xk) {
N <- length(Xk)
n <- 0:(N-1)
xn <- complex(real=rep(0,N), imaginary=rep(0,N))
for (nn in n) {
for (k in 0:(N-1)) {
xn[nn+1] <- xn[nn+1] + Xk[k+1] * exp(2i * pi * k * nn / N)
}
xn[nn+1] <- xn[nn+1] / N
}
return(xn)
}
### Exercice 1 ###
# Appliquer la TFD inverse aux résultats de l'exercice 1 pour retrouver le signal initial
signal_retrouve_exo_1 <- Re(ifft(Xk))  # Utilisez la partie réelle de la TFDI
# Créer un data frame pour le signal retrouvé
df_signal_retrouve_exo_1 <- data.frame(t, signal_retrouve_exo_1)
# Créer un vecteur de temps pour une interpolation plus fine
t_interpolation_retrouve <- seq(0, (N-1)*Te, length.out = 1000)
# Calculer la sinusoïde correspondante à votre signal avec interpolation
sinusoide_interpol_retrouve <- 2 * sin(8 * pi * t_interpolation_retrouve) + 8 * cos(4 * pi * t_interpolation_retrouve)
# Créer un data frame pour la sinusoïde interpolée
df_sinusoide_interpol <- data.frame(t = t_interpolation_retrouve, sinusoide = sinusoide_interpol_retrouve)
# Tracer le signal et la sinusoïde interpolée sur le même graphique
(
ggplot() +
geom_line(data = df_signal_retrouve_exo_1, aes(x = t, y = Re(signal_retrouve_exo_1)), color = "blue", linetype = "dashed") +
geom_path(data = df_sinusoide_interpol, aes(x = t, y = sinusoide), color = "red") +
geom_point(data = df_signal_retrouve_exo_1, aes(x = t, y = Re(signal_retrouve_exo_1)), color = "blue") +  # Ajouter des points bleus pour le signal
labs(x = "Temps", y = "Amplitude") +
ggtitle("Signal Retrouvé - Exercice 1")
)
# # Calculer le spectre d'amplitude
# amplitude_spectrum_exo_1 <- Mod(Xk)
#
# # Créer un data frame pour le spectre d'amplitude
# df_spectrum_exo_1 <- data.frame(
#   frequency = seq(0, (N-1)*(1/Te), by=1/Te),
#   amplitude_spectrum = amplitude_spectrum_exo_1
# )
#
# # Effectuer une interpolation pour obtenir une courbe lisse
# smoothed_spectrum_exo_1 <- spline(df_spectrum_exo_1$frequency, df_spectrum_exo_1$amplitude_spectrum, n=1000)
#
# # Créer un nouveau data frame pour les données lissées
# df_smoothed_spectrum_exo_1 <- data.frame(
#   frequency = smoothed_spectrum_exo_1$x,
#   amplitude_spectrum = smoothed_spectrum_exo_1$y
# )
#
# # Tracer le spectre d'amplitude lissé avec les points originaux
# (
#   ggplot(df_spectrum_exo_1, aes(x=frequency))
#   + geom_line(aes(y=amplitude_spectrum), color="blue", linetype = "dashed")  # Tracer le spectre d'amplitude original sous forme de courbe bleue
#   + geom_line(data=df_smoothed_spectrum_exo_1, aes(x=frequency, y=amplitude_spectrum), color="red")  # Tracer le spectre d'amplitude lissé sous forme de courbe rouge
#   + geom_point(data=df_spectrum_exo_1, aes(x=frequency, y=amplitude_spectrum), color="blue")  # Ajouter des points bleus aux sommets de la courbe originale
#   + labs(x="Fréquence (Hz)", y="Amplitude")
#   + ggtitle("Spectre d'Amplitude Lissé - Exercice 1")
# )
### Exercice 2 ###
# Appliquer la TFD inverse aux résultats de l'exercice 2 pour retrouver le signal initial
signal_retrouve_exo_2 <- Re(ifft(Xk1))  # Utilisez la partie réelle de la TFDI
# Créer un data frame pour le signal retrouvé
df_signal_retrouve_exo_2 <- data.frame(t1, signal_retrouve_exo_2)
# Créer un vecteur de temps pour une interpolation plus fine
t_interpolation_retrouve <- seq(0, (N1-1)*Te, length.out = 1000)
# Calculer la sinusoïde correspondante au signal retrouvé avec interpolation
sinusoide_interpol_retrouve <- 3 * sin(8 * pi * t_interpolation_retrouve) + 4 * cos(6 * pi * t_interpolation_retrouve)
# Créer un data frame pour la sinusoïde interpolée du signal retrouvé
df_sinusoide_interpol_retrouve <- data.frame(t1 = t_interpolation_retrouve, sinusoide = sinusoide_interpol_retrouve)
# Tracer le signal retrouvé et la sinusoïde interpolée sur le même graphique
(
ggplot() +
geom_line(data = df_signal_retrouve_exo_2, aes(x = t1, y = signal_retrouve_exo_2), color = "blue", linetype = "dashed") +
geom_path(data = df_sinusoide_interpol_retrouve, aes(x = t1, y = sinusoide), color = "red") +
geom_point(data = df_signal_retrouve_exo_2, aes(x = t1, y = signal_retrouve_exo_2), color = "blue") +
labs(x = "Temps", y = "Amplitude") +
ggtitle("Signal Retrouvé - Exercice 2")
)
# # Calculer le spectre d'amplitude
# amplitude_spectrum_exo_2 <- Mod(Xk1)
#
# # Créer un data frame pour le spectre d'amplitude
# df_spectrum_exo_2 <- data.frame(
#   frequency = seq(0, (N1-1)*(1/Te), by=1/Te),
#   amplitude_spectrum = amplitude_spectrum_exo_2
# )
#
# # Effectuer une interpolation pour obtenir une courbe lisse
# smoothed_spectrum_exo_2 <- spline(df_spectrum_exo_2$frequency, df_spectrum_exo_2$amplitude_spectrum, n=1000)
#
# # Créer un nouveau data frame pour les données lissées
# df_smoothed_spectrum_exo_2 <- data.frame(
#   frequency = smoothed_spectrum_exo_2$x,
#   amplitude_spectrum = smoothed_spectrum_exo_2$y
# )
#
# # Tracer le spectre d'amplitude lissé avec les points originaux
# (
#   ggplot(df_spectrum_exo_2, aes(x=frequency))
#   + geom_line(aes(y=amplitude_spectrum), color="blue", linetype = "dashed")  # Tracer le spectre d'amplitude original sous forme de courbe bleue
#   + geom_line(data=df_smoothed_spectrum_exo_2, aes(x=frequency, y=amplitude_spectrum), color="red")  # Tracer le spectre d'amplitude lissé sous forme de courbe rouge
#   + geom_point(data=df_spectrum_exo_2, aes(x=frequency, y=amplitude_spectrum), color="blue")  # Ajouter des points bleus aux sommets de la courbe originale
#   + labs(x="Fréquence (Hz)", y="Amplitude")
#   + ggtitle("Spectre d'Amplitude Lissé - Exercice 2")
# )
library(crayon)
# Implémenter la TFD inverse
ifft <- function(Xk) {
N <- length(Xk)
n <- 0:(N-1)
xn <- complex(real=rep(0,N), imaginary=rep(0,N))
for (nn in n) {
for (k in 0:(N-1)) {
xn[nn+1] <- xn[nn+1] + Xk[k+1] * exp(2i * pi * k * nn / N)
}
xn[nn+1] <- xn[nn+1] / N
}
return(xn)
}
### Exercice 1 ###
# Appliquer la TFD inverse aux résultats de l'exercice 1 pour retrouver le signal initial
signal_retrouve_exo_1 <- Re(ifft(Xk))  # Utilisez la partie réelle de la TFDI
# Créer un data frame pour le signal retrouvé
df_signal_retrouve_exo_1 <- data.frame(t, signal_retrouve_exo_1)
# Créer un vecteur de temps pour une interpolation plus fine
t_interpolation_retrouve <- seq(0, (N-1)*Te, length.out = 1000)
# Calculer la sinusoïde correspondante à votre signal avec interpolation
sinusoide_interpol_retrouve <- 2 * sin(8 * pi * t_interpolation_retrouve) + 8 * cos(4 * pi * t_interpolation_retrouve)
# Créer un data frame pour la sinusoïde interpolée
df_sinusoide_interpol <- data.frame(t = t_interpolation_retrouve, sinusoide = sinusoide_interpol_retrouve)
# Tracer le signal et la sinusoïde interpolée sur le même graphique
(
ggplot() +
geom_line(data = df_signal_retrouve_exo_1, aes(x = t, y = Re(signal_retrouve_exo_1)), color = "blue", linetype = "dashed") +
geom_path(data = df_sinusoide_interpol, aes(x = t, y = sinusoide), color = "red") +
geom_point(data = df_signal_retrouve_exo_1, aes(x = t, y = Re(signal_retrouve_exo_1)), color = "blue") +  # Ajouter des points bleus pour le signal
labs(x = "Temps", y = "Amplitude") +
ggtitle("Signal Retrouvé - Exercice 1")
)
# # Calculer le spectre d'amplitude
# amplitude_spectrum_exo_1 <- Mod(Xk)
#
# # Créer un data frame pour le spectre d'amplitude
# df_spectrum_exo_1 <- data.frame(
#   frequency = seq(0, (N-1)*(1/Te), by=1/Te),
#   amplitude_spectrum = amplitude_spectrum_exo_1
# )
#
# # Effectuer une interpolation pour obtenir une courbe lisse
# smoothed_spectrum_exo_1 <- spline(df_spectrum_exo_1$frequency, df_spectrum_exo_1$amplitude_spectrum, n=1000)
#
# # Créer un nouveau data frame pour les données lissées
# df_smoothed_spectrum_exo_1 <- data.frame(
#   frequency = smoothed_spectrum_exo_1$x,
#   amplitude_spectrum = smoothed_spectrum_exo_1$y
# )
#
# # Tracer le spectre d'amplitude lissé avec les points originaux
# (
#   ggplot(df_spectrum_exo_1, aes(x=frequency))
#   + geom_line(aes(y=amplitude_spectrum), color="blue", linetype = "dashed")  # Tracer le spectre d'amplitude original sous forme de courbe bleue
#   + geom_line(data=df_smoothed_spectrum_exo_1, aes(x=frequency, y=amplitude_spectrum), color="red")  # Tracer le spectre d'amplitude lissé sous forme de courbe rouge
#   + geom_point(data=df_spectrum_exo_1, aes(x=frequency, y=amplitude_spectrum), color="blue")  # Ajouter des points bleus aux sommets de la courbe originale
#   + labs(x="Fréquence (Hz)", y="Amplitude")
#   + ggtitle("Spectre d'Amplitude Lissé - Exercice 1")
# )
### Exercice 2 ###
# Appliquer la TFD inverse aux résultats de l'exercice 2 pour retrouver le signal initial
signal_retrouve_exo_2 <- Re(ifft(Xk1))  # Utilisez la partie réelle de la TFDI
# Créer un data frame pour le signal retrouvé
df_signal_retrouve_exo_2 <- data.frame(t1, signal_retrouve_exo_2)
# Créer un vecteur de temps pour une interpolation plus fine
t_interpolation_retrouve <- seq(0, (N1-1)*Te, length.out = 1000)
# Calculer la sinusoïde correspondante au signal retrouvé avec interpolation
sinusoide_interpol_retrouve <- 3 * sin(8 * pi * t_interpolation_retrouve) + 4 * cos(6 * pi * t_interpolation_retrouve)
# Créer un data frame pour la sinusoïde interpolée du signal retrouvé
df_sinusoide_interpol_retrouve <- data.frame(t1 = t_interpolation_retrouve, sinusoide = sinusoide_interpol_retrouve)
# Tracer le signal retrouvé et la sinusoïde interpolée sur le même graphique
(
ggplot() +
geom_line(data = df_signal_retrouve_exo_2, aes(x = t1, y = signal_retrouve_exo_2), color = "blue", linetype = "dashed") +
geom_path(data = df_sinusoide_interpol_retrouve, aes(x = t1, y = sinusoide), color = "red") +
geom_point(data = df_signal_retrouve_exo_2, aes(x = t1, y = signal_retrouve_exo_2), color = "blue") +
labs(x = "Temps", y = "Amplitude") +
ggtitle("Signal Retrouvé - Exercice 2")
)
# # Calculer le spectre d'amplitude
# amplitude_spectrum_exo_2 <- Mod(Xk1)
#
# # Créer un data frame pour le spectre d'amplitude
# df_spectrum_exo_2 <- data.frame(
#   frequency = seq(0, (N1-1)*(1/Te), by=1/Te),
#   amplitude_spectrum = amplitude_spectrum_exo_2
# )
#
# # Effectuer une interpolation pour obtenir une courbe lisse
# smoothed_spectrum_exo_2 <- spline(df_spectrum_exo_2$frequency, df_spectrum_exo_2$amplitude_spectrum, n=1000)
#
# # Créer un nouveau data frame pour les données lissées
# df_smoothed_spectrum_exo_2 <- data.frame(
#   frequency = smoothed_spectrum_exo_2$x,
#   amplitude_spectrum = smoothed_spectrum_exo_2$y
# )
#
# # Tracer le spectre d'amplitude lissé avec les points originaux
# (
#   ggplot(df_spectrum_exo_2, aes(x=frequency))
#   + geom_line(aes(y=amplitude_spectrum), color="blue", linetype = "dashed")  # Tracer le spectre d'amplitude original sous forme de courbe bleue
#   + geom_line(data=df_smoothed_spectrum_exo_2, aes(x=frequency, y=amplitude_spectrum), color="red")  # Tracer le spectre d'amplitude lissé sous forme de courbe rouge
#   + geom_point(data=df_spectrum_exo_2, aes(x=frequency, y=amplitude_spectrum), color="blue")  # Ajouter des points bleus aux sommets de la courbe originale
#   + labs(x="Fréquence (Hz)", y="Amplitude")
#   + ggtitle("Spectre d'Amplitude Lissé - Exercice 2")
# )
# Algorithme FFT (Transformée de Fourier Rapide)
fft_recursive <- function(x) {
N <- length(x)
if (N <= 1) {
return(x)
}
even <- fft_recursive(x[seq(2, N, by = 2)])
odd <- fft_recursive(x[seq(1, N, by = 2)])
T <- exp(-2i * pi * (0:(N/2-1)) / N)
return(c(even + T * odd, even - T * odd))
}
# Exemple de calcul FFT avec une sinusoïde plus distincte
N <- 32  # Taille de la séquence
f <- 4  # Fréquence de la sinusoïde
x <- sin(2 * pi * f * (1:N) / N)  # Séquence de données contenant une sinusoïde
# Calculer la FFT
fft_result <- fft_recursive(round(x, digits = 10))
print(fft_result)
# Calculer la magnitude de la séquence FFT
magnitude <- Mod(fft_result)
# Afficher la magnitude
print(magnitude)
# Graphique pour la partie réelle et imaginaire des composantes
par(mfrow=c(2, 1))  # Divise la zone de tracé en deux parties
# Partie réelle (sans arrondi)
real_part <- Re(fft_result)
barplot(real_part, col = "skyblue", main = "Partie Réelle des Composantes", xlab = "Fréquence", ylab = "Amplitude")
xlabel <- seq(0, length(fft_result) - 1, by = 1)
axis(1, at = xlabel, labels = xlabel)
# Partie imaginaire
imag_part <- Im(fft_result)
barplot(imag_part, col = "lightcoral", main = "Partie Imaginaire des Composantes", xlab = "Fréquence", ylab = "Amplitude")
xlabel <- seq(0, length(fft_result) - 1, by = 1)
axis(1, at = xlabel, labels = xlabel)
# Rétablir le paramètre de disposition par défaut
par(mfrow=c(1, 1))
# Mesurer le temps d'exécution de l'algorithme FFT
x <- rnorm(2^16)  # Créer une séquence de données aléatoires de taille 2^16
system.time(fft_result <- fft_recursive(x))
